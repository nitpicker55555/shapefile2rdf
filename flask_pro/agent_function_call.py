prompt="""
You are an AI assistant that processes complex database queries. Below are the functions you can use:

{

    "find_bounding_box": {
        "Argument": ["region_name"],
        "Description": "If user wants to get query result from a specific location, you need to first run this function with argument region_name, then the other function would limit its result in this region automatically (you don't need to add region name to other function). Example: if user wants to search result from munich germany, input of this function would be ['munich germany']."
    },
    "list_type_of_graph_name": {
        "Argument": ["graph_name"],
        "Description": "Enter the name of the graph you want to query and it returns all types of that graph. For example, for a soil graph, the types are different soil types."
    },
    "list_id_of_type": {
        "Arguments": ["graph_name", "type_name"],
        "Description": "Enter the graph name and type name you want to query, and it returns the corresponding element IDs.
                        If you want to get id_list from multi types at the same time, you can input arg type_name as a list."
        "Example":"
                
        If user wants to search soil that suitable for agriculture,
        first you need to figure out what kind of soil the soil graph have using list_type_of_graph_name,
            "command": {
        "command": "list_type_of_graph_name",
        "args": ["http://example.com/soil"],
        "variable": "soil_type"
    },
        then input type list you think is good for agriculture(please pick its full name but not only index of this type), and use list_id_of_type to get its id_list
                    "command": {
        "command": "list_id_of_type",
        "args": ["http://example.com/soil",[type list]],
        "variable": "soil_id"
    },
        
        "
    },

        "geo_calculate": {
        "Arguments": [id_list_1, id_list_2,"function name",buffer_number=0],
        "Description": "
        geo_calculate function has functions: contains, intersects, buffer. 
        Input should be two id_list which generated by function list_id_of_type and function name you want to use. 
        
        function contains: return which id in id_list_2 geographically contains which id in id_list_1
        function intersects: return which id in id_list_2 geographically intersects which id in id_list_1
        function buffer: return which id in id_list_2 geographically intersects the buffer of which id in id_list_1, if you want to call buffer, you need to specify the last argument "buffer_number" as a number.
        "Example":
        If user wants to search buildings in farmland, 
        first you need to figure out farmland and buildings in which graph using function list_type_of_graph_name,
        then generate id_list for buildings and farmland using function list_id_of_type, 
        "command": {
        "command": "list_id_of_type",
        "args": ["http://example.com/buildings", "building"]
        "variable":"id_list1"
        },
        "command": {
        "command": "list_id_of_type",
        "args": ["http://example.com/landuse", "farmland"]
        "variable":"id_list2"
        },
        finally call geo_calculate(id_list_1,id_list_2,"contains").
        "command": {
        "command": "geo_calculate",
        "args": ["id_list1", "id_list2","contains"]
        "variable":"contains_list"
        }
        "
    }
}
"""

tools = [{
    "type": "function",
    "function": {
        "name": "list_id_of_type",
        "description": "get all element id of one specific type",
        "parameters": {
            "type": "object",
            "properties": {
                "graph_name": {
                    "type": "string",
                    "enum": ['http://example.com/landuse', 'http://example.com/soil',
                             'http://example.com/buildings'],
                    "description": f"the graph user wants to search in database, you need to select the one has most "
                                   f"similar semantic meaning",
                },
                "single_type": {
                    "type": "string",
                    "description": "type of data user want to search",
                },

            },
            "required": ["graph_name", "type_name"]
        },
    }
},
    {
        "type": "function",
        "function": {
            "name": "list_type_of_graph_name",
            "description": "get all element types of this graph and return a type_list, example: for soil graph, "
                           "its type_list gonna be different kinds of soil",
            "parameters": {
                "type": "object",
                "properties": {
                    "graph_name": {
                        "type": "string",
                        "enum": ['http://example.com/landuse', 'http://example.com/soil',
                                 'http://example.com/buildings'],
                        "description": f"the graph user wants to search in database, you need to select the one has "
                                       f"most similar semantic meaning",
                    },

                },
                "required": ["graph_name"],
            },
        }
    },

    {
        "type": "function",
        "function": {
            "name": "find_bounding_box",
            "description": "If user wants to get query result from a specific location, you need to first run this "
                           "function with argument region_name, then the other function would limit its result in "
                           "this region automatically (you don't need to add region name to other function). Example: "
                           "if user wants to search result from munich germany, input of this function would be ["
                           "'munich germany'].",

            "parameters": {
                "type": "object",
                "properties": {
                    "region_name": {
                        "type": "string",
                        "description": f"the region name you want to search",
                    },

                },
                "required": ["region_name"],
            },
        }
    },
    {
        "type": "function",
        "function": {
            "name": "geo_calculate",
            "description": "geo_calculate function has functions: contains, intersects, buffer. Input should be two "
                           "id_list which generated by function list_id_of_type and function name you want to use. ",

            "parameters": {
                "type": "object",
                "properties": {
                    "subject_variable": {
                        "type": "string",
                        "description": f"the subject variable name in search",
                    },
                    "object_variable": {
                        "type": "string",
                        "description": f"the object variable name in search",
                    },
                    "function_name": {
                        "type": "string",
                        "enum": ['contains', 'intersects',
                                 'buffer'],
                        "description": f"the geo relationship user wants to search.",
                    },
                    "buffer_number": {
                        "type": "int",
                        "description": f"if the geo relationship user asked is about buffer area, then you need to "
                                       f"input a integer value as "
                                       f"buffer_number.",
                    },

                },
                "required": ["id_list_1", 'id_list_2', 'function_name'],
            },
        }
    },

]


import shapefile
from shapely.geometry import shape as Shape
from rdflib import Graph, Literal, Namespace, RDF, URIRef

# Setting base namespaces
GEO = Namespace("http://www.opengis.net/ont/geosparql#")
EX = Namespace("http://example.org/data/")

# Read Shapefile
shp_path = r"C:\Users\Morning\Downloads\tn_09162\Nutzung.dbf"
sf = shapefile.Reader(shp_path)

# Create a new RDF graph
g = Graph()
g.bind("geo", GEO)
g.bind("ex", EX)

# Loop through each record in the Shapefile and convert it to RDF triples
for idx, (shp, record) in enumerate(zip(sf.shapes(), sf.records())):
    feature_uri = URIRef(f"http://example.org/data/{idx}")  # Use idx as unique identifier

    geom = Shape(shp)
    wkt_literal = Literal(geom.wkt)

    # You can add type-specific handling if needed, but for now, we'll generalize
    g.add((feature_uri, RDF.type, GEO[geom.geometryType()]))
    g.add((feature_uri, GEO["asWKT"], wkt_literal))

    # Add other attributes
    for i, field in enumerate(sf.fields[1:]):
        prop_uri = URIRef(f"http://example.org/data/{field[0]}")
        g.add((feature_uri, prop_uri, Literal(record[i])))

# Serialize the graph as a Turtle file
g.serialize(destination="output2.ttl", format="turtle")
"""
'POLYGON ((682586.4 5341952.64, 682587.15 5341958.3, 682590.25 5341967.87, 682650.55 5341977.62, 682686.9 5341984.33, 682715.04 5341991.9, 682751.33 5342004.05, 682792.88 5342020.62, 682836.96 5342039.57, 682857.91 5342048.05, 682893.17 5342059.15, 682903.49 5342062.45, 682866.3 5342187.65, 682822.19 5342312.55, 682859.16 5342336.83, 682867.03 5342310.11, 682873.0 5342291.59, 682878.44 5342276.46, 682883.18 5342266.14, 682891.31 5342249.41, 682894.36 5342243.66, 682901.0 5342231.94, 682907.85 5342219.85, 682919.26 5342201.92, 682933.09 5342185.23, 682947.98 5342168.64, 682964.65 5342153.13, 682989.09 5342135.42, 683018.33 5342117.05, 683050.09 5342103.19, 683103.29 5342083.72, 683209.6 5342043.82, 683239.69 5342031.53, 683295.02 5342004.85, 683366.71 5341969.89, 683354.76 5341944.36, 683344.06 5341949.35, 683253.49 5341990.84, 683197.7 5342017.64, 683179.58 5342024.65, 683160.57 5342030.14, 683141.25 5342034.23, 683123.26 5342036.75, 683102.93 5342037.7, 683084.7 5342037.45, 683065.49 5342035.78, 683050.46 5342033.57, 683034.91 5342029.86, 683016.99 5342024.66, 683001.84 5342019.69, 682985.71 5342012.96, 682977.56 5342008.6, 682967.86 5342003.42, 682965.96 5342002.25, 682961.63 5342009.85, 682959.87 5342013.0, 682986.56 5342026.58, 683005.24 5342034.94, 683028.04 5342042.1, 683060.11 5342046.57, 683092.46 5342048.17, 683125.98 5342045.57, 683074.54 5342054.63, 683044.39 5342058.18, 683013.87 5342057.72, 682974.0 5342057.13, 682944.09 5342052.26, 682940.27 5342066.65, 682939.09 5342071.11, 682954.62 5342073.26, 682983.37 5342075.81, 683013.55 5342078.52, 683049.36 5342078.57, 683091.12 5342073.58, 683051.24 5342086.79, 683022.39 5342100.08, 683000.95 5342109.76, 682972.28 5342127.47, 682939.8 5342158.42, 682910.56 5342189.31, 682910.09 5342189.99, 682897.19 5342208.33, 682897.37 5342205.96, 682898.38 5342195.57, 682899.86 5342182.56, 682902.01 5342167.64, 682904.48 5342153.68, 682907.15 5342140.98, 682910.66 5342126.58, 682914.05 5342113.73, 682926.49 5342071.46, 682927.28 5342068.79, 682932.9 5342050.34, 682936.02 5342040.07, 682939.47 5342030.74, 682944.22 5342019.32, 682950.03 5342007.32, 682951.95 5342003.85, 682957.07 5341993.95, 682950.71 5341990.08, 682982.26 5341882.62, 682987.27 5341866.58, 682990.47 5341862.63, 682993.53 5341852.6, 682993.91 5341849.1, 682992.76 5341847.49, 682992.37 5341845.39, 682994.27 5341839.21, 682971.97 5341832.17, 682970.92 5341831.47, 682969.59 5341835.98, 682933.15 5341957.56, 682928.11 5341975.22, 682919.13 5341966.78, 682907.29 5341954.44, 682892.77 5341937.2, 682880.17 5341918.88, 682869.47 5341900.77, 682859.36 5341878.88, 682851.98 5341858.26, 682844.86 5341831.08, 682841.33 5341805.5, 682840.19 5341774.6, 682842.47 5341746.18, 682846.96 5341724.72, 682853.98 5341698.37, 682863.16 5341675.74, 682869.87 5341662.14, 682880.2 5341644.55, 682894.18 5341623.6, 682907.39 5341609.47, 682903.1 5341603.3, 682888.36 5341619.14, 682874.08 5341640.51, 682863.26 5341659.1, 682856.42 5341673.69, 682847.5 5341695.93, 682840.0 5341723.13, 682835.93 5341744.9, 682832.92 5341773.3, 682834.28 5341806.1, 682837.78 5341832.42, 682844.88 5341860.32, 682852.09 5341881.66, 682862.8 5341903.14, 682874.46 5341922.89, 682887.03 5341941.66, 682901.69 5341959.49, 682914.4 5341972.61, 682924.0 5341981.65, 682923.35 5341982.41, 682924.7 5341983.51, 682906.06 5342046.9, 682897.58 5342044.5, 682875.79 5342039.25, 682857.24 5342031.06, 682814.98 5342012.49, 682756.46 5341988.9, 682703.5 5341972.74, 682659.85 5341964.16, 682586.4 5341952.64)] [(682884.31 5342218.91, 682884.92 5342217.14, 682886.92 5342217.84, 682886.31 5342219.6, 682884.31 5342218.91))' not valid for datatype XSD wktLiteral

"""
